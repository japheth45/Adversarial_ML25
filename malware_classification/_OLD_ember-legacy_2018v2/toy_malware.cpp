#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <windows.h> // <-- ADDED: To include Windows API declarations

// A simple function to perform an XOR operation on a buffer of data.
void xor_buffer(std::vector<char>& buffer, char key) {
    for (size_t i = 0; i < buffer.size(); ++i) {
        buffer[i] = buffer[i] ^ key;
    }
}

int main() {
    // --- ADDED: Declare pointers to suspicious functions to add them to the import table ---
    // These are classic anti-debugging and process-inspection functions.
    // We don't need to call them; their presence is the feature.
    HMODULE hKernel32 = LoadLibraryA("kernel32.dll");
    if (hKernel32) {
        (void)GetProcAddress(hKernel32, "IsDebuggerPresent");
        (void)GetProcAddress(hKernel32, "CreateToolhelp32Snapshot");
        (void)GetProcAddress(hKernel32, "WriteProcessMemory");
    }
    // --- END OF ADDED SECTION ---

    std::string filename = "corrupt_this.pdf";
    char xor_key = 0x41; // The character 'A'

    std::cout << "Attempting to open and manipulate '" << filename << "'..." << std::endl;

    // ... (the rest of the code is unchanged) ...
    std::ifstream infile(filename, std::ios::binary | std::ios::ate);
    if (!infile.is_open()) {
        std::cerr << "Error: Could not find " << filename << ". Please create this file." << std::endl;
        return 1;
    }
    std::streamsize size = infile.tellg();
    infile.seekg(0, std::ios::beg);
    std::vector<char> buffer(size);
    if (!infile.read(buffer.data(), size)) {
        std::cerr << "Error: Could not read the file content." << std::endl;
        infile.close();
        return 1;
    }
    infile.close();
    std::cout << "Performing XOR operation on file contents..." << std::endl;
    xor_buffer(buffer, xor_key);
    std::ofstream outfile(filename, std::ios::binary | std::ios::trunc);
    if (!outfile.is_open()) {
        std::cerr << "Error: Could not open file for writing." << std::endl;
        return 1;
    }
    if (!outfile.write(buffer.data(), size)) {
        std::cerr << "Error: Could not write modified data back to file." << std::endl;
        outfile.close();
        return 1;
    }
    outfile.close();
    std::cout << "Operation complete. Running this program again will restore the file." << std::endl;

    return 0;
}
